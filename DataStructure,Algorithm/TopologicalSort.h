#pragma once
#include "Graph.h"
#include "LinkedList.h"

// 위상 정렬
// 위상 = "어떤 정점이 다른 정점과의 관계 속에서 가지는 위치"
// 위치 속성은 간선의 방향에 의해 결정된다. 간선이 뻗어나오는 정점이 앞이 되고 간선이 들어가는 정점이 뒤가 된다.
// 이 앞/뒤 관계를 정렬하는 것이 위상 정렬이다.
// 위상 정렬의 조건은 그래프의 방향이 있어야 하고, 그래프 내에 사이클이 없어야한다.
// 위 조건을 만족시키는 그래프를 DAG(Directed Acyclic Graph)라고 한다.

// 간선에는 진출 간선과 진입 간선이 있다.
// 진입 간선은 정점으로 들어가는 간선, 진출 간선은 정점에서 나오는 간선이다.

// 위상 정렬 알고리즘의 순서
// 1. 리스트를 생성한다.
// 2. 그래프에서 진입 간선이 없는 정점을 리스트에 추가하고, 해당 정점 자신과 진출 간선ㅇ르 제거한다.
// 3. 모든 정점에 대해 2를 반복하고 그래프 내에 정점이 남아 있지 않으면 정렬을 종료한다. 이때 리스트에는 위상 정렬된 그래프가 남아있는다.

// 깊이 우선 탐색을 이용한 방법
// 1. 리스트를 생성한다.
// 2. 그래프에서 진입 간선이 없는 정점에 대해 깊이 우선 탐색을 시행하고, 탐색 중에 더 이상 옮겨 갈 수 없는 인접 정점이 없는 정점을 만나면 이 정점을 리스트의 새로운 '헤드'로 입력한다.
// 3. 2를 반복하다가 더 이상 방무누할 정점이 없으면 깊이 우선 탐색을 종료한다. 리스트에는 위상 정렬된 그래프가 남는다.

void TopologicalSort(Vertex* V, Node** List);
void TS_DFS(Vertex* V, Node** List);